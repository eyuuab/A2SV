class Solution {
    const int mod = 1e9 + 7;
public:
    int dp[3002][4][302];
    int rec(vector<int>& arr,int idx,int cnt,int target){
        if(cnt == 0)    return target == 0;
        else if(idx >= arr.size())  return 0;
        else if(target < 0) return 0;
        else if(dp[idx][cnt][target] != -1) return dp[idx][cnt][target];
        
        int pick = rec(arr,idx+1,cnt-1,target-arr[idx]);
        int notPick = rec(arr,idx+1,cnt,target);
        
        return dp[idx][cnt][target] = (pick%mod + notPick%mod)%mod;
    }
    int threeSumMulti(vector<int>& arr, int target) {
        memset(dp,-1,sizeof(dp));
        return rec(arr,0,3,target);
    }
};
